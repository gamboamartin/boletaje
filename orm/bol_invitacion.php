<?php
namespace gamboamartin\boletaje\models;
use base\orm\modelo;
use gamboamartin\errores\errores;
use PDO;
use stdClass;
use tests\base\controller\base_htmlTest;

class bol_invitacion extends modelo{
    public function __construct(PDO $link){
        $tabla = 'bol_invitacion';
        $columnas = array($tabla=>false);
        $campos_obligatorios = array('descripcion','codigo','codigo_bis','descripcion_select','n_boletos',
            'n_boletos_extra','n_ingresos','evento','nombre_completo','licenciatura','generacion','domicilio',
            'fecha_hora','plantel');

        parent::__construct(link: $link,tabla:  $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas);

        $this->NAMESPACE = __NAMESPACE__;

    }

    public function alta_bd(): array|stdClass
    {

        if(!isset($this->registro['nombre_completo'])){
            $keys = array('nombre','ap','am');
            $valida = $this->validacion->valida_existencia_keys(keys: $keys,registro:  $this->registro);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al validar registro', data: $valida);
            }
            $nombre_completo = $this->registro['nombre'].' '.$this->registro['ap'].' '.$this->registro['am'];
            $this->registro['nombre_completo'] = $nombre_completo;
        }

        if(!isset($this->registro['n_boletos'])){
            $this->registro['n_boletos'] = 0;
        }
        if(!isset($this->registro['n_boletos_extra'])){
            $this->registro['n_boletos_extra'] = 0;
        }
        if(!isset($this->registro['n_ingresos'])){
            $this->registro['n_ingresos'] = 0;
        }


        if(!isset($this->registro['codigo'])){
            $codigo = mt_rand(1000000000, 9999999999);

            $existe = true;
            while($existe) {
                $existe = $this->existe(filtro: array('bol_invitacion.codigo' => $codigo));
                if (errores::$error) {
                    return $this->error->error(mensaje: 'Error al verificar si existe', data: $existe);
                }

                if ($existe) {

                    $codigo = mt_rand(2000000000, 9999999999);
                }
            }

            $this->registro['codigo'] = $codigo;
        }
        if(!isset($this->registro['codigo_bis'])){
            $codigo_bis = mt_rand(100000000000, 999999999999);
            $existe = true;
            while($existe) {

                $existe = $this->existe(filtro: array('bol_invitacion.codigo_bis' => $codigo_bis));
                if (errores::$error) {
                    return $this->error->error(mensaje: 'Error al verificar si existe', data: $existe);
                }
                if ($existe) {
                    $codigo_bis = mt_rand(200000000000, 999999999999);
                }
            }

            $this->registro['codigo_bis'] = $codigo_bis;
        }
        if(!isset($this->registro['descripcion'])){

            $descripcion = $this->registro['nombre_completo'].' '.$this->registro['n_boletos'].' '.$this->registro['n_boletos_extra'];
            $this->registro['descripcion'] = $descripcion;
        }

        if(!isset($this->registro['descripcion_select'])){

            $descripcion_select = strtoupper($this->registro['nombre_completo'].' '.$this->registro['n_boletos'].' '.$this->registro['n_boletos_extra']);
            $this->registro['descripcion_select'] = $descripcion_select;
        }



        $r_alta_bd = parent::alta_bd(); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al dar de alta invitacion', data: $r_alta_bd);
        }
        return $r_alta_bd;
    }
}